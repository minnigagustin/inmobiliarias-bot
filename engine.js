// engine.js ‚Äî Core del flujo (compartido entre WhatsApp y Web Chat)
// ‚úÖ NLU h√≠brido (pre es-compromise ‚Üí reglas ‚Üí IA OpenAI)
// ‚úÖ ‚ÄúBR-Group est√° escribiendo‚Ä¶‚Äù lo maneja el front; aqu√≠ solo respondemos.
// ‚úÖ Manejo de fotos en reportes y conteo en el resumen.
// ‚úÖ S√≠/No flexible y textos m√°s naturales para ‚Äúno‚Äù.

const { classifyIntent } = require("./nlp");
const { preIntent } = require("./nlu_pre");

// ===== Estado =====
const sessions = new Map(); // chatId -> { step, data, history: [] }
function getSession(chatId) {
  if (!sessions.has(chatId))
    sessions.set(chatId, { step: "start", data: {}, history: [] });
  return sessions.get(chatId);
}
function reset(chatId) {
  sessions.set(chatId, { step: "start", data: {}, history: [] });
}
function pushHistory(s, text) {
  s.history = s.history || [];
  s.history.push(text);
  if (s.history.length > 6) s.history.shift();
}

const NLU_STEPS = new Set([
  "start",
  "main",
  "alquileres_menu",
  "prop_menu",
  "consultas_menu",
  "rep_categoria",
  "indices_menu",
]);

// ===== Helpers =====
function fmtCurrency(n) {
  if (typeof n !== "number" || isNaN(n)) return n;
  return new Intl.NumberFormat("es-AR", {
    style: "currency",
    currency: "ARS",
    maximumFractionDigits: 2,
  }).format(n);
}
function num(v) {
  if (typeof v !== "string") return Number(v);
  const normalized = v.replace(/\s/g, "").replace(/\./g, "").replace(",", ".");
  return Number(normalized);
}
const capitalize = (s) => (s ? s.charAt(0).toUpperCase() + s.slice(1) : s);

function mapIndice(k) {
  const m = {
    ICL: "ICL (BCRA)",
    CAC: "CAC (Construcci√≥n)",
    UVA: "UVA",
    UVI: "UVI",
    CER: "CER",
    CASA_PROPIA: "Coeficiente Casa Propia",
    IPC_INDEC_2M: "IPC (INDEC) ‚Äì 2 meses",
    IPC_INDEC_1M: "IPC (INDEC) ‚Äì 1 mes",
    IPC_CREEBBA_2M: "IPC (CREEBBA) ‚Äì 2 meses",
    IPC_CREEBBA_1M: "IPC (CREEBBA) ‚Äì 1 mes",
  };
  return k ? m[k] || null : null;
}

function stripAccents(s) {
  return String(s || "")
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "");
}
function parseYesNo(text) {
  const t = stripAccents(String(text || "").toLowerCase()).trim();

  // S√≠
  if (/^(si|s|s√≠)$/.test(t)) return "yes";
  if (/\b(dale|ok(ay)?|claro|por supuesto|de una|va|listo|perfecto)\b/.test(t))
    return "yes";
  if (
    /\b(quiero|necesito|me\s+contactan|contactame|llamame|llamenme|hablenme)\b/.test(
      t
    )
  )
    return "yes";

  // No
  if (/^(n|no|nop|noo|nah)$/.test(t)) return "no";
  if (
    /\b(no\s+gracias|gracias\s+pero\s+no|estoy\s+bien|por\s+ahora\s+no|no\s+hace\s+falta|prefiero\s+que\s+no|mas\s+tarde|despues)\b/.test(
      t
    )
  ) {
    return "no";
  }
  return null;
}

// Reparaci√≥n / disculpa
function isRepair(text) {
  const t = String(text || "").toLowerCase();
  return /no me entend(iste|es)|no era eso|eso no|te confund(iste|es)|me expres(e|√©) mal|perd(o|√≥)n.*(no|me|entend)/.test(
    t
  );
}

// ===== Reglas r√°pidas =====
function cheapDetectIntent(text) {
  const t = text.toLowerCase();

  // Small talk
  if (
    /\b(gracias|muchas gracias|mil gracias|genial|b√°rbaro|barbaro|perfecto|de nada)\b/.test(
      t
    )
  )
    return { intent: "thanks" };
  if (
    /\b(chau|adios|adi√≥s|hasta luego|nos vemos|buenas noches|buenas tardes|buen d√≠a|buen dia)\b/.test(
      t
    )
  )
    return { intent: "goodbye" };

  if (/(humano|operador|agente|asesor)/.test(t)) return { intent: "operator" };
  if (/(^|\s)(hola|buenas|menu|inicio|start)(\s|$)/.test(t))
    return { intent: "greeting" };
  if (/(inquilin)/.test(t)) return { intent: "tenant_info" };
  if (/(propietari|due√±)/.test(t)) return { intent: "owner_info" };

  // Cobrar (prioridad sobre ‚Äúalquilar‚Äù)
  if (
    /\b(cobro|cobrar|liquidaci[o√≥]n|rendici[o√≥]n)\b/.test(t) &&
    !/(quiero|busco|necesito|me interesa).{0,12}alquil/.test(t)
  ) {
    return { intent: "owner_info" };
  }

  // Problemas
  if (
    /(romp|gote|fuga|p√©rdida|perdida|corto|chispa|no anda|no funciona|descompuesto|perd√≠ la llave|canilla|inund)/.test(
      t
    )
  ) {
    let category = null;
    if (/(canilla|agua|gote)/.test(t)) category = "Plomer√≠a";
    else if (/\bgas\b/.test(t)) category = "Gas";
    else if (/(electric|corto|chispa|enchufe|luz)/.test(t))
      category = "Electricidad";
    else if (/(artefacto|termotan|calefon|heladera|cocina|horno)/.test(t))
      category = "Artefacto roto";
    return { intent: "report_issue", slots: { category } };
  }

  // √çndices
  if (
    /(icl|cac|uva|uvi|cer|casa propia|ipc)/.test(t) ||
    /(actualizar|indice|√≠ndice)/.test(t)
  ) {
    let idx = null;
    if (/\bicl\b/.test(t)) idx = "ICL";
    else if (/\bcac\b/.test(t)) idx = "CAC";
    else if (/\buva\b/.test(t)) idx = "UVA";
    else if (/\buvi\b/.test(t)) idx = "UVI";
    else if (/\bcer\b/.test(t)) idx = "CER";
    else if (/casa propia/.test(t)) idx = "CASA_PROPIA";
    else if (/ipc.*indec.*2/.test(t)) idx = "IPC_INDEC_2M";
    else if (/ipc.*indec.*1/.test(t)) idx = "IPC_INDEC_1M";
    else if (/ipc.*creebba.*2/.test(t)) idx = "IPC_CREEBBA_2M";
    else if (/ipc.*creebba.*1/.test(t)) idx = "IPC_CREEBBA_1M";
    return { intent: "index_update", slots: { index: idx } };
  }

  // Propiedades (exigir verbo)
  if (
    /(alquil(ar|o|e|emos|en)|quiero\s+alquil|busco\s+alquiler|necesito\s+alquil)/.test(
      t
    )
  )
    return { intent: "properties_rent" };
  if (/(comprar|compra|quiero\s+comprar|busco\s+comprar)/.test(t))
    return { intent: "properties_buy" };
  if (/(temporari|por d√≠a|por dia|por semana)/.test(t))
    return { intent: "properties_temp" };
  if (/(vender|venta|tasaci)/.test(t)) return { intent: "properties_sell" };

  return null;
}

// ===== Mini-FAQ =====
function quickAnswer(text) {
  const t = text.toLowerCase();
  if (
    /(horari|a qu√© hora|a que hora|cu√°ndo ati|cuando ati|direcci|ubicaci|d√≥nde est√°n|donde estan)/.test(
      t
    )
  ) {
    return `üìç Direcci√≥n: [Direcci√≥n ficticia]
üïí Horarios: Lunes a viernes de 9 a 13 y de 16 a 19 hs
üìû Tel√©fono alternativo: [N√∫mero ficticio]`;
  }
  if (
    /(c√≥mo pago|como pago|forma[s]? de pago|medios de pago|pagar alquil|transferencia|efectivo)/.test(
      t
    )
  ) {
    return `üí≥ Formas de pago (demo):
‚Ä¢ Transferencia bancaria
‚Ä¢ Efectivo en oficina
‚Ä¢ Plataformas electr√≥nicas
Conserv√° siempre el comprobante.`;
  }
  if (
    /(tasaci|tasar|valor de mi propiedad|cu√°nto sale la tasaci√≥n|cuanto sale la tasacion)/.test(
      t
    )
  ) {
    return `üìè Tasaci√≥n (demo):
Coordinamos una visita sin costo para estimar el valor. ¬øQuer√©s que te contacte un asesor? Escrib√≠ *operador*.`;
  }
  if (/\b(qu√© es|que es)\b.*\b(icl|cac|uva|uvi|cer|casa propia)\b/.test(t)) {
    const idx = t.match(/\b(icl|cac|uva|uvi|cer|casa propia)\b/)[1];
    const def =
      {
        icl: "ICL: √çndice de Contratos de Locaci√≥n (BCRA) para actualizaci√≥n de alquileres.",
        cac: "CAC: √çndice de la C√°mara Argentina de la Construcci√≥n, usado en ajustes de obras/alquileres.",
        uva: "UVA: Unidad de Valor Adquisitivo (actualiza por inflaci√≥n).",
        uvi: "UVI: Unidad de Vivienda (similar a UVA, referida a construcci√≥n).",
        cer: "CER: Coeficiente de Estabilizaci√≥n de Referencia (ajuste por inflaci√≥n).",
        "casa propia":
          "Coeficiente Casa Propia: actualizaci√≥n de cr√©ditos/contratos del programa Casa Propia.",
      }[idx] || "Es un √≠ndice de actualizaci√≥n utilizado en contratos.";
    return `‚ÑπÔ∏è ${def}`;
  }
  if (
    /(renovar contrato|renovaci√≥n|renovacion|me atraso|pago tarde|interes|inter√©s)/.test(
      t
    )
  ) {
    return `üìå Renovaci√≥n y atrasos (demo):
‚Ä¢ Renovaci√≥n: gestionarla 60‚Äì90 d√≠as antes del vencimiento.
‚Ä¢ Atrasos: pueden generar intereses y notificaciones. Avis√° si sab√©s que vas a retrasarte.`;
  }
  return null;
}

// ===== Textos =====
function mainMenuText() {
  return [
    "üëã Hola, soy el asistente virtual de BR-Group.",
    "Pod√©s escribir con tus palabras, sin n√∫meros. Ejemplos:",
    "‚Ä¢ ‚Äúse rompi√≥ la canilla del ba√±o‚Äù",
    "‚Ä¢ ‚Äúquiero actualizar el alquiler por ICL‚Äù",
    "‚Ä¢ ‚Äúbusco depto para alquilar en el centro‚Äù",
    "‚Ä¢ ‚Äúsoy propietario, ¬øc√≥mo cobro?‚Äù",
    "‚Ä¢ ‚Äúhablar con un humano‚Äù",
    "",
    "Si prefer√≠s, tambi√©n entendemos: alquileres / propiedades / consultas.",
  ].join("\n");
}
function alquileresMenuText() {
  return [
    "Opciones de administraci√≥n de alquileres (escrib√≠ en lenguaje natural):",
    "‚Ä¢ Reportar un problema o rotura (ej. ‚Äúgotea la canilla‚Äù, ‚Äúfuga de gas‚Äù).",
    "‚Ä¢ Consultar actualizaci√≥n por √≠ndice (ICL, CAC, UVA/UVI, CER, Casa Propia, IPC).",
    "‚Ä¢ Informaci√≥n para inquilinos.",
    "‚Ä¢ Informaci√≥n para propietarios.",
    "‚Ä¢ Hablar con un humano.",
  ].join("\n");
}
function indicesMenuText() {
  return [
    "Decime qu√© √≠ndice quer√©s usar:",
    "ICL, CAC, UVA, UVI, CER, Casa Propia, IPC INDEC (1 o 2 meses), IPC CREEBBA (1 o 2 meses).",
    "Ejemplo: ‚ÄúICL‚Äù, ‚ÄúIPC INDEC 2 meses‚Äù.",
  ].join("\n");
}
function inquilinosInfoText() {
  return `üìå C√≥mo pagar mi alquiler
Pod√©s pagar por transferencia, efectivo en oficina o plataformas electr√≥nicas. Guard√° siempre el comprobante.

üìå Qu√© pasa si me atraso
Podr√≠an generarse intereses, notificaciones de deuda y gestiones legales. Avis√° antes si sab√©s que vas a retrasarte.

üìå C√≥mo renovar el contrato
Se gestiona entre 60 y 90 d√≠as antes del vencimiento. Revis√° condiciones antes de firmar.

üìå C√≥mo presentar un reclamo
Contact√° a la inmobiliaria, explic√° el motivo, envi√° fotos y ped√≠ confirmaci√≥n escrita.
`;
}
function propietariosInfoText() {
  return `üìå C√≥mo cobro los alquileres
Pod√©s recibir el pago por transferencia, dep√≥sito o efectivo seg√∫n lo acordado. Manten√© tus datos bancarios actualizados.

üìå Qu√© impuestos administra BRGroup (demo)
Impuesto municipal, inmobiliario y servicios b√°sicos (a modo de ejemplo).

üìå C√≥mo accedo a mis reportes
Por email, acceso web o copia impresa.
`;
}

// ===== Intent handler (NLU) =====
async function handleNLUIntent(nlu, s) {
  const replies = [];
  let notifyAgent = null;

  const body =
    nlu.followup_question && nlu.intent === "other"
      ? nlu.followup_question
      : null;

  switch (nlu.intent) {
    case "greeting":
      replies.push(mainMenuText());
      s.step = "main";
      break;
    case "thanks":
      replies.push(
        "‚ú® ¬°De nada! ¬øQuer√©s algo m√°s? Pod√©s escribir *menu* para ver opciones."
      );
      break;
    case "goodbye":
      replies.push(
        "üëã ¬°Hasta luego! Cuando quieras retomamos. Escrib√≠ *menu* para empezar de nuevo."
      );
      break;
    case "operator":
      replies.push("üë§ Te derivo con un integrante del equipo. (Demo).");
      notifyAgent = { motivo: "Pedido de operador (NLU)" };
      break;

    case "tenant_info":
      replies.push(inquilinosInfoText());
      s.step = "alquileres_menu";
      replies.push(alquileresMenuText());
      break;

    case "owner_info":
      replies.push(propietariosInfoText());
      s.step = "alquileres_menu";
      replies.push(alquileresMenuText());
      break;

    case "report_issue":
      s.data.categoria = nlu?.slots?.category
        ? nlu.slots.category === "plomeria"
          ? "Plomer√≠a"
          : nlu.slots.category === "gas"
          ? "Gas"
          : nlu.slots.category === "electricidad"
          ? "Electricidad"
          : nlu.slots.category === "artefacto"
          ? "Artefacto roto"
          : "Otro"
        : null;
      if (s.data.categoria) {
        s.step = "rep_direccion";
        replies.push("üìç Pasame la *direcci√≥n del inmueble*:");
      } else {
        s.step = "rep_categoria";
        replies.push(
          "¬øQu√© tipo de problema es? (Plomer√≠a, Gas, Electricidad, Artefacto roto u Otro)"
        );
      }
      break;

    case "index_update":
      s.data.indice = mapIndice(nlu?.slots?.index);
      s.step = s.data.indice ? "ind_monto" : "indices_menu";
      replies.push(
        s.data.indice
          ? `Perfecto, *${s.data.indice}*. Ingres√° el *alquiler actual*:`
          : indicesMenuText()
      );
      break;

    case "properties_rent":
      s.data.op = "alquilar";
      s.step = "prop_buscar_tipo";
      replies.push(
        "üß≠ ¬øQu√© tipo de propiedad quer√©s alquilar? (casa, depto, ph, etc.)"
      );
      break;
    case "properties_buy":
      s.data.op = "comprar";
      s.step = "prop_buscar_tipo";
      replies.push(
        "üß≠ ¬øQu√© tipo de propiedad quer√©s comprar? (casa, depto, ph, etc.)"
      );
      break;
    case "properties_temp":
      s.data.op = "temporario";
      s.step = "prop_buscar_tipo";
      replies.push(
        "üß≠ ¬øQu√© tipo de propiedad busc√°s para temporario? (casa, depto, ph, etc.)"
      );
      break;
    case "properties_sell":
      s.data.op = "vender";
      s.step = "prop_vender_tipo";
      replies.push(
        "üßæ ¬øQu√© *tipo de propiedad* quer√©s vender? (casa, depto, local, etc.)"
      );
      break;

    case "other":
    default:
      if (body) {
        replies.push(body);
        s.data.await = /cobrar|cobro/i.test(body)
          ? "owner_or_other"
          : "clarify_generic";
      } else
        replies.push(
          "No me qued√≥ claro. Por ejemplo: ‚Äúse rompi√≥ la canilla‚Äù, ‚Äúactualizar por ICL‚Äù, ‚Äúalquilar depto en centro‚Äù o ‚Äúoperador‚Äù."
        );
      break;
  }

  return { replies, notifyAgent };
}

// ===== Manejo de IMAGEN =====
async function handleImage({ chatId, file }) {
  const s = getSession(chatId);
  s.data.fotos = s.data.fotos || [];
  s.data.fotos.push(file); // {url, type, name}

  const replies = [];
  if (
    ["rep_categoria", "rep_direccion", "rep_desc", "rep_derivar"].includes(
      s.step
    )
  ) {
    replies.push("üì∏ ¬°Gracias por la foto! La a√±ad√≠ al reporte.");
    if (s.step === "rep_direccion")
      replies.push("Cuando puedas, pasame la *direcci√≥n del inmueble*:");
    else if (s.step === "rep_desc")
      replies.push(
        "Si quer√©s, pod√©s agregar otra foto o contar una *descripci√≥n* (qu√© pas√≥, desde cu√°ndo)."
      );
  } else {
    replies.push("üì∏ ¬°Gracias por la imagen!");
  }
  return { replies, session: s };
}

// ===== Main handleText =====
async function handleText({ chatId, text }) {
  const s = getSession(chatId);
  pushHistory(s, text);

  const bodyRaw = (text || "").trim();
  const body = bodyRaw.toLowerCase();
  const replies = [];
  let notifyAgent = null;

  // Atajos
  if (["menu", "inicio", "start", "/start"].includes(body)) {
    reset(chatId);
    replies.push(mainMenuText());
    return { replies, notifyAgent, session: getSession(chatId) };
  }
  if (["operador", "humano", "agente", "asesor"].includes(body)) {
    replies.push("üë§ Te derivo con un integrante del equipo. (Demo).");
    notifyAgent = { motivo: "Pedido de operador" };
    return { replies, notifyAgent, session: s };
  }

  // Reparaci√≥n
  if (isRepair(bodyRaw)) {
    s.data = {};
    s.step = "main";
    replies.push(
      "Uy, perd√≥n ‚Äî me confund√≠. Contame de nuevo con tus palabras qu√© necesit√°s y te ayudo. üôÇ"
    );
    replies.push(mainMenuText());
    return { replies, notifyAgent, session: s };
  }

  // Desambiguaciones pendientes
  if (s.data.await) {
    if (s.data.await === "owner_or_other") {
      if (/\balquiler\b/.test(body)) {
        s.data.await = null;
        replies.push(propietariosInfoText());
        s.step = "alquileres_menu";
        replies.push(alquileresMenuText());
        return { replies, notifyAgent, session: s };
      }
      if (/\botra cosa\b|otra|no|^n$/.test(body)) {
        s.data.await = null;
        replies.push(
          "Dale, contame un poco m√°s de qu√© tema se trata y veo c√≥mo ayudarte."
        );
        return { replies, notifyAgent, session: s };
      }
      replies.push(
        "¬øTe refer√≠s a *cobrar el alquiler* o a otra cosa? Si es cobre de alquiler, decime *alquiler*."
      );
      return { replies, notifyAgent, session: s };
    }
    if (s.data.await === "clarify_generic") {
      if (body.split(/\s+/).length < 3) {
        replies.push(
          "Decime un poquito m√°s de detalles as√≠ te ayudo mejor. üòä"
        );
        return { replies, notifyAgent, session: s };
      }
      s.data.await = null;
    }
  }

  // Mini-FAQ
  const quick = quickAnswer(bodyRaw);
  if (quick) {
    replies.push(quick);
    return { replies, notifyAgent, session: s };
  }

  // NLU (no en formularios)
  const expectingNumeric = [
    "ind_monto",
    "ind_inicial",
    "ind_final",
    "prop_dorm",
    "prop_banos",
  ].includes(s.step);
  const canUseNLU = NLU_STEPS.has(s.step);

  if (!expectingNumeric && canUseNLU) {
    // pre-NLU
    const pre = preIntent(bodyRaw);
    if (pre && pre.intent) {
      const res = await handleNLUIntent(
        { intent: pre.intent, slots: pre.slots || {} },
        s
      );
      replies.push(...res.replies);
      notifyAgent = res.notifyAgent || notifyAgent;
      return { replies, notifyAgent, session: s };
    }
    if (
      pre &&
      pre.hint &&
      typeof pre.hint.budget === "number" &&
      s.step === "prop_presupuesto"
    ) {
      const p = Number(pre.hint.budget);
      if (p > 0) {
        s.data.prop = s.data.prop || { op: s.data.op || "alquilar" };
        s.data.prop.presupuesto = p;
        s.step = "prop_zona";
        replies.push(`üí∞ Tom√© tu presupuesto: ${fmtCurrency(p)}`);
        replies.push("üìç Zona / barrio preferido:");
        return { replies, notifyAgent, session: s };
      }
    }

    // reglas
    const cheap = cheapDetectIntent(bodyRaw);
    if (cheap) {
      const res = await handleNLUIntent(
        { intent: cheap.intent, slots: cheap.slots || {} },
        s
      );
      replies.push(...res.replies);
      notifyAgent = res.notifyAgent || notifyAgent;
      return { replies, notifyAgent, session: s };
    }

    // IA
    const nlu = await classifyIntent({
      text: bodyRaw,
      history: s.history,
      step: s.step,
    });
    if (nlu && nlu.intent) {
      const res = await handleNLUIntent(nlu, s);
      replies.push(...res.replies);
      notifyAgent = res.notifyAgent || notifyAgent;
      if (
        nlu.intent === "other" &&
        nlu.followup_question &&
        /cobrar|cobro/i.test(nlu.followup_question)
      )
        s.data.await = "owner_or_other";
      return { replies, notifyAgent, session: s };
    }
  }

  // FSM cl√°sica
  switch (s.step) {
    case "start":
      replies.push(mainMenuText());
      s.step = "main";
      break;
    case "main":
      replies.push(mainMenuText());
      s.step = "main";
      break;

    // Reporte problema
    case "rep_categoria": {
      const map = {
        1: "Plomer√≠a",
        2: "Gas",
        3: "Electricidad",
        4: "Artefacto roto",
        5: "Otro",
      };
      s.data.categoria = map[body] || capitalize(bodyRaw);
      s.step = "rep_direccion";
      replies.push("üìç Pasame la *direcci√≥n del inmueble*:");
      break;
    }
    case "rep_direccion": {
      s.data.direccion = bodyRaw;
      s.step = "rep_desc";
      replies.push(
        "üìù Contame una *descripci√≥n* (qu√© pas√≥, desde cu√°ndo). Pod√©s adjuntar foto si quer√©s."
      );
      break;
    }
    case "rep_desc": {
      s.data.descripcion = bodyRaw;
      s.step = "rep_derivar";
      replies.push(
        `‚úÖ ¬°Gracias! Registr√©:
‚Ä¢ Categor√≠a: ${s.data.categoria}
‚Ä¢ Direcci√≥n: ${s.data.direccion}
‚Ä¢ Descripci√≥n: ${s.data.descripcion}
${
  s.data.fotos && s.data.fotos.length
    ? `‚Ä¢ Fotos: ${s.data.fotos.length}`
    : "‚Ä¢ Fotos: no enviadas"
}

¬øQuer√©s que te atienda alguien del equipo? (s√≠/no)`
      );
      break;
    }
    case "rep_derivar": {
      const yn = parseYesNo(bodyRaw);
      if (yn === "yes") {
        notifyAgent = {
          categoria: s.data.categoria,
          direccion: s.data.direccion,
          descripcion: s.data.descripcion,
          fotos: (s.data.fotos || []).map((f) => f.url),
        };
        replies.push("üë§ Te derivo con un integrante del equipo. ¬°Gracias!");
        reset(chatId);
      } else if (yn === "no") {
        replies.push(
          "üëç Entendido. Lo dejamos registrado. Si necesit√°s algo m√°s, escrib√≠ *menu* para volver al inicio."
        );
        reset(chatId);
      } else {
        replies.push('Respond√© "s√≠" o "no", por favor.');
      }
      break;
    }

    // √çndices
    case "indices_menu": {
      replies.push(indicesMenuText());
      break;
    }
    case "ind_monto": {
      const monto = num(bodyRaw);
      if (!monto || monto <= 0)
        replies.push("Monto inv√°lido. Prob√° de nuevo (solo n√∫meros).");
      else {
        s.data.monto = monto;
        s.step = "ind_inicial";
        replies.push("Ingres√° el *valor del √≠ndice inicial* (ej: 21,54):");
      }
      break;
    }
    case "ind_inicial": {
      const v = num(bodyRaw);
      if (!v || v <= 0) replies.push("Valor inv√°lido. Prob√° de nuevo.");
      else {
        s.data.ind_val_inicial = v;
        s.step = "ind_final";
        replies.push("Ingres√° el *valor del √≠ndice final* (ej: 24,19):");
      }
      break;
    }
    case "ind_final": {
      const v = num(bodyRaw);
      if (!v || v <= 0) replies.push("Valor inv√°lido. Prob√° de nuevo.");
      else {
        s.data.ind_val_final = v;
        const factor = s.data.ind_val_final / s.data.ind_val_inicial;
        const variacionPct = (factor - 1) * 100;
        const nuevo = s.data.monto * factor;
        s.step = "ind_derivar";
        s.data.calculo = `Factor: ${factor.toFixed(6)} (${variacionPct.toFixed(
          2
        )} %), Nuevo: ${fmtCurrency(nuevo)}`;
        replies.push(
          `üßÆ Resultado para *${s.data.indice || "√çndice seleccionado"}*:
‚Ä¢ Alquiler actual: ${fmtCurrency(s.data.monto)}
‚Ä¢ Factor: ${factor.toFixed(6)} (${variacionPct.toFixed(2)} %)
‚Ä¢ Nuevo alquiler: ${fmtCurrency(nuevo)}

¬øQuer√©s que te atienda alguien del equipo? (s√≠/no)`
        );
      }
      break;
    }
    case "ind_derivar": {
      const yn = parseYesNo(bodyRaw);
      if (yn === "yes") {
        notifyAgent = { indice: s.data.indice, calculo: s.data.calculo };
        replies.push("üë§ Te derivo con un integrante del equipo. ¬°Gracias!");
        reset(chatId);
      } else if (yn === "no") {
        replies.push(
          "üëç Perfecto. Si necesit√°s algo m√°s, escrib√≠ *menu* para volver al inicio."
        );
        reset(chatId);
      } else {
        replies.push('Respond√© "s√≠" o "no", por favor.');
      }
      break;
    }

    // Propiedades
    case "prop_menu": {
      replies.push(
        "Contame si quer√©s alquilar, comprar, temporario o vender; y el tipo (‚Äúcasa‚Äù, ‚Äúdepto‚Äù, ‚Äúph‚Äù‚Ä¶)."
      );
      break;
    }
    case "prop_buscar_tipo": {
      s.data.prop = { tipo: bodyRaw, op: s.data.op || "alquilar" };
      s.step = "prop_presupuesto";
      replies.push("üí∞ Indic√° *presupuesto aproximado* (ej: 250000):");
      break;
    }
    case "prop_presupuesto": {
      const p = num(bodyRaw);
      if (!p || p <= 0) replies.push("Valor inv√°lido. Prob√° de nuevo.");
      else {
        s.data.prop.presupuesto = p;
        s.step = "prop_zona";
        replies.push("üìç Zona / barrio preferido:");
      }
      break;
    }
    case "prop_zona": {
      s.data.prop.zona = bodyRaw;
      s.step = "prop_dorm";
      replies.push("üõèÔ∏è Dormitorios (n√∫mero):");
      break;
    }
    case "prop_dorm": {
      const d = parseInt(bodyRaw, 10);
      if (isNaN(d) || d < 0) replies.push("Ingres√° un n√∫mero (0,1,2,3...).");
      else {
        s.data.prop.dorm = d;
        s.step = "prop_banos";
        replies.push("üõÅ Ba√±os (n√∫mero):");
      }
      break;
    }
    case "prop_banos": {
      const b = parseInt(bodyRaw, 10);
      if (isNaN(b) || b < 0) replies.push("Ingres√° un n√∫mero (0,1,2...).");
      else {
        s.data.prop.banos = b;
        s.step = "prop_cochera";
        replies.push("üöó ¬øCochera? (s√≠/no):");
      }
      break;
    }
    case "prop_cochera": {
      s.data.prop.cochera = ["si", "s√≠", "yes", "ok"].includes(body)
        ? "S√≠"
        : "No";
      s.step = "prop_comodidades";
      replies.push(
        "üß© Comodidades (ej: balc√≥n, patio, parrilla). Pod√©s listar varias:"
      );
      break;
    }
    case "prop_comodidades": {
      s.data.prop.comodidades = bodyRaw;
      const demo = [
        {
          titulo: "Depto 2 amb. c/balc√≥n ‚Äì Centro",
          precio: fmtCurrency(s.data.prop.presupuesto),
        },
        {
          titulo: "PH 3 amb. c/patio ‚Äì Barrio Norte",
          precio: fmtCurrency(s.data.prop.presupuesto * 1.1),
        },
        {
          titulo: "Casa 3 dorm. c/cochera ‚Äì Oeste",
          precio: fmtCurrency(s.data.prop.presupuesto * 1.3),
        },
      ];
      replies.push(
        `üîé B√∫squeda *${s.data.prop.op}* ‚Äì *${s.data.prop.tipo}*
‚Ä¢ Presupuesto: ${fmtCurrency(s.data.prop.presupuesto)}
‚Ä¢ Zona: ${s.data.prop.zona}
‚Ä¢ Dorm: ${s.data.prop.dorm} | Ba√±os: ${s.data.prop.banos} | Cochera: ${
          s.data.prop.cochera
        }
‚Ä¢ Comodidades: ${s.data.prop.comodidades}

üìÑ Resultados (demo):
1) ${demo[0].titulo} ‚Äì ${demo[0].precio}
2) ${demo[1].titulo} ‚Äì ${demo[1].precio}
3) ${demo[2].titulo} ‚Äì ${demo[2].precio}

¬øQuer√©s que un asesor te contacte? (s√≠/no)`
      );
      s.step = "prop_buscar_derivar";
      break;
    }
    case "prop_buscar_derivar": {
      const yn = parseYesNo(bodyRaw);
      if (yn === "yes") {
        notifyAgent = {
          propform: s.data.prop,
          motivo: "Consulta de propiedades",
        };
        replies.push("üë§ Te derivo con un integrante del equipo (simulado).");
        reset(chatId);
      } else if (yn === "no") {
        replies.push(
          "üëç Queda guardado. Si quer√©s volver al inicio, escrib√≠ *menu*."
        );
        reset(chatId);
      } else {
        replies.push('Respond√© "s√≠" o "no", por favor.');
      }
      break;
    }

    // Consultas generales
    case "consultas_menu": {
      if (/ubicaci|direcci|d√≥nde|donde|horari/.test(body)) {
        replies.push(
          `üìç Direcci√≥n: [Direcci√≥n ficticia]
üïí Horarios: Lunes a viernes de 9 a 13 y de 16 a 19 hs
üìû Tel√©fono alternativo: [N√∫mero ficticio]`
        );
      } else {
        replies.push(
          'Contame tu consulta o escrib√≠ "operador" para hablar con alguien del equipo.'
        );
      }
      break;
    }

    default:
      reset(chatId);
      replies.push(mainMenuText());
  }

  return { replies, notifyAgent, session: s };
}

module.exports = { handleText, handleImage, reset, getSession };
